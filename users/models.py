from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone
from django.db.models.signals import post_save
from django.dispatch import receiver

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    
    GENDER_CHOICES = [
        ('M', '–ú—É–∂—Å–∫–æ–π'),
        ('F', '–ñ–µ–Ω—Å–∫–∏–π'),
        ('O', '–î—Ä—É–≥–æ–µ'),
    ]
    
    STATUS_CHOICES = [
        ('single', '–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ'),
        ('dating', '–í—Å—Ç—Ä–µ—á–∞—é—Å—å'),
        ('married', '–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º'),
        ('complicated', '–í—Å–µ —Å–ª–æ–∂–Ω–æ'),
        ('not_looking', '–ù–µ –∏—â—É –æ—Ç–Ω–æ—à–µ–Ω–∏—è'),
    ]
    
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES, blank=True, null=True)
    birth_date = models.DateField(blank=True, null=True)
    city = models.CharField(max_length=100, blank=True, default='')
    bio = models.TextField(max_length=500, blank=True)
    hobbies = models.TextField(max_length=1000, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='single')
    
    likes_count = models.IntegerField(default=0)
    views_count = models.IntegerField(default=0)
    
    privacy_settings = models.CharField(max_length=10, default='public')
    show_online_status = models.BooleanField(default=True)
    allow_messages = models.BooleanField(default=True)
    
    is_verified = models.BooleanField(default=False)
    last_online = models.DateTimeField(default=timezone.now)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user.first_name} {self.user.last_name}"

    @property
    def age(self):
        if not self.birth_date:
            return None
        today = timezone.now().date()
        return today.year - self.birth_date.year - (
            (today.month, today.day) < (self.birth_date.month, self.birth_date.day)
        )

class UserPhoto(models.Model):
    user_profile = models.ForeignKey(UserProfile, on_delete=models.CASCADE, related_name='photos')
    image = models.ImageField(upload_to='user_photos/')
    is_main = models.BooleanField(default=False)
    caption = models.CharField(max_length=200, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    order = models.IntegerField(default=0)

    class Meta:
        ordering = ['order', 'created_at']

    def save(self, *args, **kwargs):
        if self.is_main:
            UserPhoto.objects.filter(user_profile=self.user_profile, is_main=True).update(is_main=False)
        super().save(*args, **kwargs)

    def __str__(self):
        return f"Photo of {self.user_profile}"
    
@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if created:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_or_create —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
            UserProfile.objects.get_or_create(user=instance)
            print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {instance.username}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        instance.profile.save()
    except UserProfile.DoesNotExist:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        UserProfile.objects.create(user=instance)
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {instance.username}")

# –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü models.py
def check_all_profiles():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏"""
    from django.contrib.auth.models import User
    for user in User.objects.all():
        if not hasattr(user, 'profile'):
            UserProfile.objects.create(user=user)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {user.username}")

# –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
# check_all_profiles()

def get_user_profile(self):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ property –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    try:
        return self.userprofile
    except UserProfile.DoesNotExist:
        profile = UserProfile.objects.create(user=self)
        print(f"üîÑ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è {self.username}")
        return profile

# –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ property
User.add_to_class('get_profile', get_user_profile)